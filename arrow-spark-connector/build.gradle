buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'



//////////// Jarfile Generation Section ////////////
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/** Builds a full jar JAR, with all dependencies contained */
shadowJar {
    zip64(true)
    configurations = [ project.configurations.shipFull ]
}


/** Builds a lightweight type JAR. You are responsible to provide all dependencies listed in the manifest `Class-Path` entry */
task lightJar(type: ShadowJar) {
    zip64(true)

    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'Main-Class': 'org.arrowspark.benchmark.Benchmark',
                'Class-Path': 'scala-library-2.12.10.jar scala-reflect-2.12.10.jar scala-xml_2.12-1.2.0.jar spark-core_2.12-3.0.1.jar spark-sql_2.12-3.0.1.jar avro-1.8.2.jar hadoop-common-2.7.4.jar log4j-1.2.17.jar'
        )
    }

    dependencies {// We have to explicitly exclude Scala lang libraries that the scala plugin tries to push
        exclude(dependency('org.scala-lang:scala-library:2.12.10'))
        exclude(dependency('org.scala-lang:scala-reflect:2.12.10'))
    }

    archiveClassifier.set('light')
    from sourceSets.main.output
    from sourceSets.test.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [ project.configurations.shipLight ]
    manifest.inheritFrom project.tasks.jar.manifest
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

/** Builds an essentials-only type JAR. You are responsible to provide all dependencies listed in the manifest `Class-Path` entry */
task essentialJar(type: ShadowJar) {
    zip64(true)

    dependencies {
        exclude(dependency('org.scala-lang:scala-library:2.12.10'))
        exclude(dependency('org.scala-lang:scala-reflect:2.12.10'))
    }

    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'Main-Class': 'org.arrowspark.benchmark.Benchmark',
                'Class-Path': 'scala-library-2.12.10.jar scala-reflect-2.12.10.jar scala-xml_2.12-1.2.0.jar spark-core_2.12-3.0.1.jar spark-sql_2.12-3.0.1.jar avro-1.8.2.jar hadoop-common-2.7.4.jar log4j-1.2.17.jar parquet-avro-1.8.2.jar log4j-api-scala_2.12-12.0.jar log4j-api-2.12.0.jar log4j-core-2.12.0.jar'
        )
    }
    archiveClassifier.set('essential')
    from sourceSets.main.output
    from sourceSets.test.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [ project.configurations.shipEssential ]
    manifest.inheritFrom project.tasks.jar.manifest
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

jar {
}

//////////// sourceSets Section ////////////

// Some Java sources depend on Scala sources.
// Java sources are compiled first, so it cannot find compiled Scala classes and that produces errors.
// Using below 4 lines, we set Java files to compile in the Scala-task.
sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []

compileJava.dependsOn buildArrow